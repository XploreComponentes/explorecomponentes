{
    "pipes": [],
    "interfaces": [
        {
            "name": "AfterContentInit",
            "id": "interface-AfterContentInit-fdeab03b169c767a5d4806fe47af1c95",
            "file": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\n\nexport interface GeolocationBlockingModel extends CmsComponent {\n    country?: string;\n    countryLanguageDropDownData?: string;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "AfterContentInit",
            "id": "interface-AfterContentInit-fad3f9fff7f5da575c4d96232bf4aff3-1",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\n\nexport interface RegisterGeolocationTopModel extends CmsComponent {\n    country?: string;\n    content?: string;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AfterContentInit-1"
        },
        {
            "name": "AfterContentInit",
            "id": "interface-AfterContentInit-6dc79a9e900524f5a873097e0de16999-2",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\nimport { Media } from \"@spartacus/storefront\";\n\nexport interface RegisterGeolocationModel extends CmsComponent {\n    country?: string;\n    content?: string;\n    logo?: Media;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "AfterContentInit-2"
        },
        {
            "name": "GeolocationBlockingModel",
            "id": "interface-GeolocationBlockingModel-fdeab03b169c767a5d4806fe47af1c95",
            "file": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\n\nexport interface GeolocationBlockingModel extends CmsComponent {\n    country?: string;\n    countryLanguageDropDownData?: string;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "countryLanguageDropDownData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "CmsComponent"
        },
        {
            "name": "KeyValuePair",
            "id": "interface-KeyValuePair-0d1bcba08fbd93f58e2997ce35169823",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentStore } from '@ngrx/component-store';\nimport { Injectable } from \"@angular/core\";\n\ninterface KeyValuePair {\n  code: string;\n  text: string;\n}\n\nexport interface RegisterGeolocationTopState {\n    currentCountry?: string;\n    selectedCountry?: string;\n    message?: string;\n    hide?: boolean;\n  }\n  \n@Injectable()\nexport class RegisterGeolocationTopStore extends ComponentStore<RegisterGeolocationTopState> {\n  \n  constructor() {\n    super({\n        currentCountry: 'Spain', \n        selectedCountry: 'Ireland', \n        message: 'Visit our local site for more information and offers for your country.',\n        hide: false\n    });\n  }\n\n  readonly getCurrentCountry = this.select(state => {\n      return state.currentCountry;\n  });\n\n  readonly getSelectedCountry = this.select(state => {\n    return state.selectedCountry\n  })\n\n  readonly getMessage = this.select(state => {\n    return state.message\n  })\n\n  readonly isHide = this.select(state => {\n      return state.hide\n  })  \n\n  readonly setSelectedCountry = this.updater(\n    (state: RegisterGeolocationTopState, newSelectedCountry: string) => {\n      return {\n        ...state,\n        selectedCountry: newSelectedCountry\n      }\n    }\n  )\n\n  readonly setHide = this.updater(\n    (state: RegisterGeolocationTopState, newHide: boolean) => {\n      return {\n        ...state,\n        hide: newHide\n      }\n    }\n  )\n}",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "RegisterGeolocationModel",
            "id": "interface-RegisterGeolocationModel-6dc79a9e900524f5a873097e0de16999",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\nimport { Media } from \"@spartacus/storefront\";\n\nexport interface RegisterGeolocationModel extends CmsComponent {\n    country?: string;\n    content?: string;\n    logo?: Media;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "CmsComponent"
        },
        {
            "name": "RegisterGeolocationTopModel",
            "id": "interface-RegisterGeolocationTopModel-fad3f9fff7f5da575c4d96232bf4aff3",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmsComponent } from \"@spartacus/core\";\n\nexport interface RegisterGeolocationTopModel extends CmsComponent {\n    country?: string;\n    content?: string;\n}\n\nexport interface AfterContentInit {\n    ngAfterContentInit(): void\n  }",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "CmsComponent"
        },
        {
            "name": "RegisterGeolocationTopState",
            "id": "interface-RegisterGeolocationTopState-0d1bcba08fbd93f58e2997ce35169823",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentStore } from '@ngrx/component-store';\nimport { Injectable } from \"@angular/core\";\n\ninterface KeyValuePair {\n  code: string;\n  text: string;\n}\n\nexport interface RegisterGeolocationTopState {\n    currentCountry?: string;\n    selectedCountry?: string;\n    message?: string;\n    hide?: boolean;\n  }\n  \n@Injectable()\nexport class RegisterGeolocationTopStore extends ComponentStore<RegisterGeolocationTopState> {\n  \n  constructor() {\n    super({\n        currentCountry: 'Spain', \n        selectedCountry: 'Ireland', \n        message: 'Visit our local site for more information and offers for your country.',\n        hide: false\n    });\n  }\n\n  readonly getCurrentCountry = this.select(state => {\n      return state.currentCountry;\n  });\n\n  readonly getSelectedCountry = this.select(state => {\n    return state.selectedCountry\n  })\n\n  readonly getMessage = this.select(state => {\n    return state.message\n  })\n\n  readonly isHide = this.select(state => {\n      return state.hide\n  })  \n\n  readonly setSelectedCountry = this.updater(\n    (state: RegisterGeolocationTopState, newSelectedCountry: string) => {\n      return {\n        ...state,\n        selectedCountry: newSelectedCountry\n      }\n    }\n  )\n\n  readonly setHide = this.updater(\n    (state: RegisterGeolocationTopState, newHide: boolean) => {\n      return {\n        ...state,\n        hide: newHide\n      }\n    }\n  )\n}",
            "properties": [
                {
                    "name": "currentCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "RegisterGeolocationTopStore",
            "id": "injectable-RegisterGeolocationTopStore-0d1bcba08fbd93f58e2997ce35169823",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
            "properties": [
                {
                    "name": "getCurrentCountry",
                    "defaultValue": "this.select(state => {\n      return state.currentCountry;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "getMessage",
                    "defaultValue": "this.select(state => {\n    return state.message\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "getSelectedCountry",
                    "defaultValue": "this.select(state => {\n    return state.selectedCountry\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "isHide",
                    "defaultValue": "this.select(state => {\n      return state.hide\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "setHide",
                    "defaultValue": "this.updater(\n    (state: RegisterGeolocationTopState, newHide: boolean) => {\n      return {\n        ...state,\n        hide: newHide\n      }\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "setSelectedCountry",
                    "defaultValue": "this.updater(\n    (state: RegisterGeolocationTopState, newSelectedCountry: string) => {\n      return {\n        ...state,\n        selectedCountry: newSelectedCountry\n      }\n    }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        143
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ComponentStore } from '@ngrx/component-store';\nimport { Injectable } from \"@angular/core\";\n\ninterface KeyValuePair {\n  code: string;\n  text: string;\n}\n\nexport interface RegisterGeolocationTopState {\n    currentCountry?: string;\n    selectedCountry?: string;\n    message?: string;\n    hide?: boolean;\n  }\n  \n@Injectable()\nexport class RegisterGeolocationTopStore extends ComponentStore<RegisterGeolocationTopState> {\n  \n  constructor() {\n    super({\n        currentCountry: 'Spain', \n        selectedCountry: 'Ireland', \n        message: 'Visit our local site for more information and offers for your country.',\n        hide: false\n    });\n  }\n\n  readonly getCurrentCountry = this.select(state => {\n      return state.currentCountry;\n  });\n\n  readonly getSelectedCountry = this.select(state => {\n    return state.selectedCountry\n  })\n\n  readonly getMessage = this.select(state => {\n    return state.message\n  })\n\n  readonly isHide = this.select(state => {\n      return state.hide\n  })  \n\n  readonly setSelectedCountry = this.updater(\n    (state: RegisterGeolocationTopState, newSelectedCountry: string) => {\n      return {\n        ...state,\n        selectedCountry: newSelectedCountry\n      }\n    }\n  )\n\n  readonly setHide = this.updater(\n    (state: RegisterGeolocationTopState, newHide: boolean) => {\n      return {\n        ...state,\n        hide: newHide\n      }\n    }\n  )\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "extends": "ComponentStore",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-daef71d80ad91d3e4b3897971ee5d874",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'testing-spartacus-ng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'testing-spartacus-ng';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<cx-storefront></cx-storefront>\n"
        },
        {
            "name": "GeolocationBlockingComponent",
            "id": "component-GeolocationBlockingComponent-86c6a136b88af863a5b57697013d0f8c",
            "file": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "geolocation-blocking-modal",
            "styleUrls": [
                "./geolocation-blocking.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./geolocation-blocking.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeResult",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CmsComponentData<GeolocationBlockingModel>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "countryList",
                    "defaultValue": "[{code: \"ja\", text: \"Japonés\"}, {code: \"en\", text: \"Inglés\"}, {code: \"de\", text: \"Holandés\"}, {code: \"zh\", text: \"Chino\"}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "countrySelected",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "language",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "languageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDismissReason",
                    "args": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "country",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "country",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ModalDismissReasons, NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport { LanguageService } from '@spartacus/core';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { GeolocationBlockingModel } from './geolocation-blocking.model';\n\n@Component({\n    selector: 'geolocation-blocking-modal',\n    templateUrl: './geolocation-blocking.component.html',\n    styleUrls: ['./geolocation-blocking.component.scss'],\n  })\n  export class GeolocationBlockingComponent implements OnInit{\n\n    @Input()\n    currentCountry?: string;\n\n    closeResult = '';\n    countryList: Array<{code: string, text: string}> = [{code: \"ja\", text: \"Japonés\"}, {code: \"en\", text: \"Inglés\"}, {code: \"de\", text: \"Holandés\"}, {code: \"zh\", text: \"Chino\"}];\n    countrySelected:string = '';\n    language: boolean = false;\n\n    constructor(\n        public component: CmsComponentData<GeolocationBlockingModel>,\n        private modalService: NgbModal,\n        public languageService: LanguageService) {}\n\n\n    ngOnInit() {\n      if(this.component?.data$) {\n        this.component.data$.subscribe(data => {\n          this.currentCountry = data.country;\n        })\n      }\n    }    \n\n    openModal(content: any) {\n      this.modalService.open(content).result.then((result) => {\n        this.closeResult = `Closed with: ${result}`;\n      }, (reason) => {\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n      });\n    }\n  \n    private getDismissReason(reason: any): string {\n      if (reason === ModalDismissReasons.ESC) {\n        return 'by pressing ESC';\n      } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n        return 'by clicking on a backdrop';\n      } else {\n        return  `with: ${reason}`;\n      }\n    }\n\n    dismiss(reason?: any) {\n      this.modalService.dismissAll(reason);\n    }\n\n    setLanguage(country: string) {\n      this.countrySelected = country;\n      this.languageService.setActive(country);\n      this.countrySelected = 'Country changed to ' + country;\n      this.modalService.dismissAll('By changing country');\n    }\n  }\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./geolocation-blocking.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<GeolocationBlockingModel>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<GeolocationBlockingModel>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "languageService",
                        "type": "LanguageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"{ observable: component.data$ | async } as data\">\n  <ng-template #modalData let-modal class=\"country-modal\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h4 class=\"modal-title\">Country Selector</h4>\n            <button type=\"button\" class=\"close modal-close\" aria-label=\"Close\" (click)=\"dismiss('Cross click')\">\n              <span aria-hidden=\"true\">×</span>\n            </button>\n          </div>\n          <div class=\"modal-body\">\n            <p>Current country by IP: {{ currentCountry }}</p>\n            <div ngbDropdown>\n              <button class=\"btn btn-warning\" id=\"countries\" \n                      ngbDropdownToggle>Select a country</button>\n              <div ngbDropdownMenu=\"countries\" class=\"dropdown-menu\">\n                <button \n                  id=\"{{'Clear_' + indice}}\"\n                  class=\"button-dropdown\"\n                \n                  ngbDropdownItem *ngFor=\"let countryLang of countryList; let indice=index\"\n                  (click) = \"setLanguage(countryLang.code)\"\n                >\n                  {{ countryLang.text }}\n                </button>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-info btn-close-modal\" (click)=\"dismiss('Save click')\">Close</button>\n          </div>\n        </div>\n      </div>\n  </ng-template>\n  \n  <button class=\"btn btn-info btn-open-modal\" id=\"testid\" (click)=\"openModal(modalData)\">Show country selector</button>\n  <br>\n  <p>Country selected: <span class=\"country-selected\">{{ countrySelected }}</span></p>\n</ng-container>\n"
        },
        {
            "name": "RegisterGeolocationComponent",
            "id": "component-RegisterGeolocationComponent-9cde854ebb1401db457ca3ed1c67172a",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "register-geolocation-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register-geolocation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentCountry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "modalBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "closeResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CmsComponentData<RegisterGeolocationModel>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLocation",
                    "args": [
                        {
                            "name": "country",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "country",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dismiss",
                    "args": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDismissReason",
                    "args": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "reason",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModalDismissReasons, NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { RegisterGeolocationModel } from './register-geolocation.model';\n\n@Component({\n    selector: 'register-geolocation-modal',\n    templateUrl: './register-geolocation.component.html'\n  })\n  export class RegisterGeolocationComponent {\n\n    @Input()\n    currentCountry?: string;\n\n    @Input()\n    modalBody?: string;\n\n    closeResult?: string;\n\n    constructor(\n      public component: CmsComponentData<RegisterGeolocationModel>,\n        private modalService: NgbModal\n        ) {}\n  \n      ngOnInit() {\n        if(this.component?.data$) {\n          this.component.data$.subscribe(data => {\n            this.currentCountry = data.country,\n            this.modalBody = data.content;\n          })\n        }\n      }  \n\n        openModal(content: any) {\n      this.modalService.open(content).result.then((result) => {\n        this.closeResult = `Closed with: ${result}`;\n      }, (reason) => {\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n      });\n    }\n  \n    private getDismissReason(reason: any): string {\n      if (reason === ModalDismissReasons.ESC) {\n        return 'by pressing ESC';\n      } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n        return 'by clicking on a backdrop';\n      } else {\n        return  `with: ${reason}`;\n      }\n    }\n\n    dismiss(reason?: any) {\n      this.modalService.dismissAll(reason);\n    }\n\n    changeLocation(country?: string) {\n      this.modalService.dismissAll('By changing country');\n      alert('Se ha cambiado su localización a ' + country);\n    }\n  }\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<RegisterGeolocationModel>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<RegisterGeolocationModel>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"{ observable: component.data$ | async } as data\">\n  <ng-template #registerModal let-modal class=\"register-modal\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-body\">\n              <button type=\"button\" class=\"close modal-close btn-close-modal\" aria-label=\"Close\" (click)=\"dismiss('Cross click')\">\n                  <span aria-hidden=\"true\">×</span>\n                </button>\n            <div [innerHTML]=\"modalBody\"></div>\n            <button class=\"btn btn-primary btn-block btn-change-location\" (click)=\"changeLocation(currentCountry)\">Cambiar localización a {{ currentCountry }}</button>\n          </div>\n        </div>\n      </div>\n  </ng-template>\n  \n  <button class=\"btn btn-info btn-open-modal\" id=\"testid\" (click)=\"openModal(registerModal)\">Open modal</button>\n  \n</ng-container>"
        },
        {
            "name": "RegisterGeolocationTopComponent",
            "id": "component-RegisterGeolocationTopComponent-d84ff1c10ab4ff47c5492cbba23d61f0",
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RegisterGeolocationTopStore"
                }
            ],
            "selector": "register-geolocation-top",
            "styleUrls": [
                "./register-geolocation-top.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-geolocation-top.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CmsComponentData<RegisterGeolocationTopModel>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegisterGeolocationTopStore",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLocation",
                    "args": [
                        {
                            "name": "country",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "country",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMsg",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { ModalDismissReasons, NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport { CmsComponentData } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\nimport { RegisterGeolocationTopModel } from './register-geolocation-top.model';\nimport { RegisterGeolocationTopStore } from './register-geolocation-top.store';\n\n@Component({\n    selector: 'register-geolocation-top',\n    templateUrl: './register-geolocation-top.component.html',\n    styleUrls: ['./register-geolocation-top.scss'],\n    animations: [\n      trigger('hideMsg', [\n        state('hide', style({\n          opacity: 0\n      })),\n      state('show', style({\n          opacity: 1\n      })),\n        transition('* => *', animate(300))\n      ]),\n    ],\n    providers: [RegisterGeolocationTopStore]\n  })\n\n  export class RegisterGeolocationTopComponent implements OnInit{\n\n  constructor(\n    public component: CmsComponentData<RegisterGeolocationTopModel>,\n    public store: RegisterGeolocationTopStore\n  ) {}\n\n  ngOnInit() {\n    if(this.component?.data$) {\n      this.component.data$.subscribe(data => {\n        // Initialize state store\n      })\n    }\n  }\n    get stateName() {\n      console.log(`Is hide: ${this.getValue(this.store.isHide)}`)\n      return this.getValue(this.store.isHide) ? 'hide' : 'show';\n    }\n  \n    closeMsg() {\n      this.store.setHide(!this.getValue(this.store.isHide))\n    }\n  \n    changeLocation(country: string | undefined) {\n      this.closeMsg();\n      this.store.setSelectedCountry('Country changed to ' + country);\n    }\n\n    getValue(obj: Observable<any>){\n      let value: any;\n      obj.subscribe(v => value = v);\n      return value;\n    }\n  }\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".GeolocationRegisterTop {\n    width: 100%;\n    margin: 25px 0 10px;\n    overflow: hidden;\n\n    &  ~ .SiteContext::after {\n        border: none;\n    }\n}\n\n.location-top-msg {\n    display: flex;\n    align-items: stretch;\n    \n    .icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: green;\n        line-height: 43px;\n        font-size: 20px;\n        color: red;\n        padding: 8px;\n    }\n    .right {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 12px 15px;\n        background-color: blue;\n        color: yellow;\n\n        p {\n            margin: 0;\n        }\n        .actions {\n            flex: 1 0 auto;\n            text-align: right;\n\n            button {\n                text-transform: none;\n            }\n        }\n        .btn-change-country {\n            margin-right: 10px;\n        }\n    }\n}\n\n@media (max-width: 768px) {\n    .location-top-msg .right {\n        flex-direction: column;\n\n        .actions {\n            display: flex;\n            align-items: center;\n            flex-wrap: wrap;\n\n            button {\n                width: 100%;\n            }\n        }\n\n        .btn-change-country {\n            margin: 10px 0;\n        }\n    }\n}",
                    "styleUrl": "./register-geolocation-top.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<RegisterGeolocationTopModel>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "RegisterGeolocationTopStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "component",
                        "type": "CmsComponentData<RegisterGeolocationTopModel>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "RegisterGeolocationTopStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "stateName": {
                    "name": "stateName",
                    "getSignature": {
                        "name": "stateName",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<ng-container>\n    <div class=\"location-top-msg\" [@hideMsg]=\"stateName\">\n        <div class=\"icon\">\n            <i class=\"fas fa-globe-americas\"></i>\n        </div>\n        <div class=\"right\">\n            <div>\n                <p [innerHTML]=\"store.getMessage | async\"></p>\n            </div>\n            <div class=\"actions\">\n                <button \n                 class=\"btn btn-info btn-change-country\"\n                 (click)=changeLocation(data.observable?.country)>\n                    <i class=\"far fa-flag\"></i>\n                    {{ store.getCurrentCountry | async }}\n                </button>\n                <button \n                 class=\"btn btn-light\"\n                 (click)=closeMsg()>\n                    Mantenerse en la página\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-container>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-7aa6a36583a94b0f672f5bac28be9230",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule } from \"@angular/common/http\";\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SpartacusModule } from './spartacus/spartacus.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    SpartacusModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SpartacusModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-47958a50d12d0f842d1ec584c86951e6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from \"@angular/router\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forRoot([], {\n      anchorScrolling: 'enabled',\n      relativeLinkResolution: 'corrected',\n      initialNavigation: 'enabled',\n    })\n  ]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AsmFeatureModule",
            "id": "module-AsmFeatureModule-7ce5e566789671b61aa3a29f54819116",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/asm/asm-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { asmTranslationChunksConfig, asmTranslations } from \"@spartacus/asm/assets\";\nimport { AsmRootModule, ASM_FEATURE } from \"@spartacus/asm/root\";\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    AsmRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [ASM_FEATURE]: {\n        module: () =>\n          import('@spartacus/asm').then((m) => m.AsmModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: asmTranslations,\n      chunks: asmTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class AsmFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartQuickOrderFeatureModule",
            "id": "module-CartQuickOrderFeatureModule-f21c7242077cbc561bf886a6a9983012",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/cart/cart-quick-order-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { quickOrderTranslationChunksConfig, quickOrderTranslations } from \"@spartacus/cart/quick-order/assets\";\nimport { CART_QUICK_ORDER_FEATURE, QuickOrderRootModule } from \"@spartacus/cart/quick-order/root\";\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    QuickOrderRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [CART_QUICK_ORDER_FEATURE]: {\n        module: () =>\n          import('@spartacus/cart/quick-order').then((m) => m.QuickOrderModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: quickOrderTranslations,\n      chunks: quickOrderTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class CartQuickOrderFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartSavedCartFeatureModule",
            "id": "module-CartSavedCartFeatureModule-29d048dcce572af36e7bc4ed427bd4f8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/cart/cart-saved-cart-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { savedCartTranslationChunksConfig, savedCartTranslations } from \"@spartacus/cart/saved-cart/assets\";\nimport { CART_SAVED_CART_FEATURE, SavedCartRootModule } from \"@spartacus/cart/saved-cart/root\";\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    SavedCartRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [CART_SAVED_CART_FEATURE]: {\n        module: () =>\n          import('@spartacus/cart/saved-cart').then((m) => m.SavedCartModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: savedCartTranslations,\n      chunks: savedCartTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class CartSavedCartFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckoutFeatureModule",
            "id": "module-CheckoutFeatureModule-b36629b0e59fc2031a665cf4221389fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/checkout/checkout-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { checkoutTranslationChunksConfig, checkoutTranslations } from \"@spartacus/checkout/assets\";\nimport { CheckoutRootModule, CHECKOUT_FEATURE } from \"@spartacus/checkout/root\";\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CheckoutRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [CHECKOUT_FEATURE]: {\n        module: () =>\n          import('@spartacus/checkout').then((m) => m.CheckoutModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: checkoutTranslations,\n      chunks: checkoutTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class CheckoutFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PersonalizationFeatureModule",
            "id": "module-PersonalizationFeatureModule-edddac034dc4e03942735c8b7546fac0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/tracking/personalization-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CmsConfig, provideConfig } from \"@spartacus/core\";\nimport { PersonalizationRootModule, PERSONALIZATION_FEATURE } from \"@spartacus/tracking/personalization/root\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    PersonalizationRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [PERSONALIZATION_FEATURE]: {\n        module: () =>\n          import('@spartacus/tracking/personalization').then((m) => m.PersonalizationModule),\n      },\n    }\n  })]\n})\nexport class PersonalizationFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductVariantsFeatureModule",
            "id": "module-ProductVariantsFeatureModule-a4ae76192cc1fe75c26bb3da0d947658",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/product/product-variants-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\nimport { productVariantsTranslationChunksConfig, productVariantsTranslations } from \"@spartacus/product/variants/assets\";\nimport { ProductVariantsRootModule, PRODUCT_VARIANTS_FEATURE } from \"@spartacus/product/variants/root\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ProductVariantsRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [PRODUCT_VARIANTS_FEATURE]: {\n        module: () =>\n          import('@spartacus/product/variants').then((m) => m.ProductVariantsModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: productVariantsTranslations,\n      chunks: productVariantsTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class ProductVariantsFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterGeolocationModule",
            "id": "module-RegisterGeolocationModule-7bcaa7a847af4308302565fd41c924d3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { CmsConfig, ConfigModule, LanguageService, provideConfig } from \"@spartacus/core\";\nimport { translationChunksConfig } from '@spartacus/assets';\nimport {\n  I18nModule,\n} from '@spartacus/core';\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { RegisterGeolocationComponent } from \"./register-geolocation.component\";\n\n@NgModule({\n    declarations: [RegisterGeolocationComponent],\n    exports: [RegisterGeolocationComponent],\n    entryComponents: [RegisterGeolocationComponent],\n    imports: [\n        CommonModule,\n        NgbModule,\n    I18nModule,\n        ConfigModule.withConfig({\n          cmsComponents: {\n            RegisterGeolocationComponent: {\n              component: RegisterGeolocationComponent\n            }\n          }\n        } as CmsConfig),\n    ],\n    providers: [\n      provideConfig({\n        i18n: {\n          backend: {\n            loadPath: 'assets/i18n-assets/{{lng}}/{{ns}}.json',\n          },\n          chunks: translationChunksConfig,\n          fallbackLang: 'en',\n        },\n      }),\n    ],\n})\n\nexport class RegisterGeolocationModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterGeolocationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RegisterGeolocationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SmartEditFeatureModule",
            "id": "module-SmartEditFeatureModule-15d502a8cda4fb04385776c2fcfd085b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/smartedit/smart-edit-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CmsConfig, provideConfig } from \"@spartacus/core\";\nimport { SmartEditRootModule, SMART_EDIT_FEATURE } from \"@spartacus/smartedit/root\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    SmartEditRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [SMART_EDIT_FEATURE]: {\n        module: () =>\n          import('@spartacus/smartedit').then((m) => m.SmartEditModule),\n      },\n    }\n  })]\n})\nexport class SmartEditFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpartacusConfigurationModule",
            "id": "module-SpartacusConfigurationModule-ba4604fe544d6dee52e0add032a209f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/spartacus-configuration.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { translationChunksConfig, translations } from \"@spartacus/assets\";\nimport { FeaturesConfig, I18nConfig, OccConfig, provideConfig, SiteContextConfig } from \"@spartacus/core\";\nimport { defaultCmsContentProviders, layoutConfig, mediaConfig } from \"@spartacus/storefront\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  providers: [provideConfig(layoutConfig), provideConfig(mediaConfig), ...defaultCmsContentProviders, provideConfig(<OccConfig>{\n    backend: {\n      occ: {\n        baseUrl: 'https://localhost:9002',\n      }\n    },\n  }), provideConfig(<SiteContextConfig>{\n    context: {\n      currency: ['USD'],\n      language: ['en'],\n    },\n  }), provideConfig(<I18nConfig>{\n    i18n: {\n      resources: translations,\n      chunks: translationChunksConfig,\n      fallbackLang: 'en'\n    },\n  }), provideConfig(<FeaturesConfig>{\n    features: {\n      level: '4.1'\n    }\n  })]\n})\nexport class SpartacusConfigurationModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpartacusFeaturesModule",
            "id": "module-SpartacusFeaturesModule-46f12f8eebdcc18201963282ce3492fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/spartacus-features.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { AnonymousConsentsModule, AuthModule, CartModule, CartOccModule, CostCenterOccModule, ExternalRoutesModule, OrderOccModule, ProductModule, ProductOccModule, UserOccTransitionalModule, UserTransitionalModule } from \"@spartacus/core\";\nimport { AddressBookModule, AnonymousConsentManagementBannerModule, AnonymousConsentsDialogModule, BannerCarouselModule, BannerModule, BreadcrumbModule, CartComponentModule, CartPageEventModule, CategoryNavigationModule, CmsParagraphModule, ConsentManagementModule, FooterNavigationModule, HamburgerMenuModule, HomePageEventModule, LinkModule, LoginRouteModule, LogoutModule, MyCouponsModule, MyInterestsModule, NavigationEventModule, NavigationModule, NotificationPreferenceModule, OrderCancellationModule, OrderDetailsModule, OrderHistoryModule, OrderReturnModule, PaymentMethodsModule, ProductCarouselModule, ProductDetailsPageModule, ProductFacetNavigationModule, ProductImagesModule, ProductIntroModule, ProductListingPageModule, ProductListModule, ProductPageEventModule, ProductReferencesModule, ProductSummaryModule, ProductTabsModule, ReplenishmentOrderDetailsModule, ReplenishmentOrderHistoryModule, ReturnRequestDetailModule, ReturnRequestListModule, SearchBoxModule, SiteContextSelectorModule, StockNotificationModule, TabParagraphContainerModule, WishListModule } from \"@spartacus/storefront\";\nimport { UserFeatureModule } from './features/user/user-feature.module';\nimport { PersonalizationFeatureModule } from './features/tracking/personalization-feature.module';\nimport { StoreFinderFeatureModule } from './features/storefinder/store-finder-feature.module';\nimport { SmartEditFeatureModule } from './features/smartedit/smart-edit-feature.module';\nimport { ProductVariantsFeatureModule } from './features/product/product-variants-feature.module';\nimport { CheckoutFeatureModule } from './features/checkout/checkout-feature.module';\nimport { CartSavedCartFeatureModule } from './features/cart/cart-saved-cart-feature.module';\nimport { CartQuickOrderFeatureModule } from './features/cart/cart-quick-order-feature.module';\nimport { AsmFeatureModule } from './features/asm/asm-feature.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    // Auth Core\n    AuthModule.forRoot(),\n    LogoutModule,\n    LoginRouteModule,\n    // Basic Cms Components\n    HamburgerMenuModule,\n    SiteContextSelectorModule,\n    LinkModule,\n    BannerModule,\n    CmsParagraphModule,\n    TabParagraphContainerModule,\n    BannerCarouselModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    // User Core,\n    UserTransitionalModule,\n    UserOccTransitionalModule,\n    // User UI,\n    AddressBookModule,\n    PaymentMethodsModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n    ConsentManagementModule,\n    MyCouponsModule,\n    // Anonymous Consents Core,\n    AnonymousConsentsModule.forRoot(),\n    // Anonymous Consents UI,\n    AnonymousConsentsDialogModule,\n    AnonymousConsentManagementBannerModule,\n    // Product Core,\n    ProductModule.forRoot(),\n    ProductOccModule,\n    // Product UI,\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ProductListModule,\n    SearchBoxModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    // Cart Core,\n    CartModule.forRoot(),\n    CartOccModule,\n    // Cart UI,\n    CartComponentModule,\n    WishListModule,\n    CostCenterOccModule,\n    // Order,\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ReplenishmentOrderHistoryModule,\n    ReplenishmentOrderDetailsModule,\n    OrderOccModule,\n    // Page Events,\n    NavigationEventModule,\n    HomePageEventModule,\n    CartPageEventModule,\n    ProductPageEventModule,\n    // External routes,\n    ExternalRoutesModule.forRoot(),\n    UserFeatureModule,\n    PersonalizationFeatureModule,\n    StoreFinderFeatureModule,\n    SmartEditFeatureModule,\n    ProductVariantsFeatureModule,\n    CheckoutFeatureModule,\n    CartSavedCartFeatureModule,\n    CartQuickOrderFeatureModule,\n    AsmFeatureModule,\n  ]\n})\nexport class SpartacusFeaturesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AsmFeatureModule"
                        },
                        {
                            "name": "CartQuickOrderFeatureModule"
                        },
                        {
                            "name": "CartSavedCartFeatureModule"
                        },
                        {
                            "name": "CheckoutFeatureModule"
                        },
                        {
                            "name": "PersonalizationFeatureModule"
                        },
                        {
                            "name": "ProductVariantsFeatureModule"
                        },
                        {
                            "name": "SmartEditFeatureModule"
                        },
                        {
                            "name": "StoreFinderFeatureModule"
                        },
                        {
                            "name": "UserFeatureModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpartacusModule",
            "id": "module-SpartacusModule-7626fc18bc95457324c695eae93b2d3c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/spartacus.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BaseStorefrontModule } from \"@spartacus/storefront\";\nimport { SpartacusConfigurationModule } from './spartacus-configuration.module';\nimport { SpartacusFeaturesModule } from './spartacus-features.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n\n    SpartacusFeaturesModule,\n    SpartacusConfigurationModule,\n    BaseStorefrontModule\n  ],\n  exports: [BaseStorefrontModule]\n})\nexport class SpartacusModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SpartacusConfigurationModule"
                        },
                        {
                            "name": "SpartacusFeaturesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoreFinderFeatureModule",
            "id": "module-StoreFinderFeatureModule-c30bcc4c783794f2a6a3b4515791481b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/storefinder/store-finder-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\nimport { storeFinderTranslationChunksConfig, storeFinderTranslations } from \"@spartacus/storefinder/assets\";\nimport { StoreFinderRootModule, STORE_FINDER_FEATURE } from \"@spartacus/storefinder/root\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    StoreFinderRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [STORE_FINDER_FEATURE]: {\n        module: () =>\n          import('@spartacus/storefinder').then((m) => m.StoreFinderModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: storeFinderTranslations,\n      chunks: storeFinderTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class StoreFinderFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestGeolocationBlockingModule",
            "id": "module-TestGeolocationBlockingModule-1a0b1804fa289886043e7c505dfc17ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { CmsConfig, ConfigModule, LanguageService, provideConfig } from \"@spartacus/core\";\nimport { translationChunksConfig } from '@spartacus/assets';\nimport { I18nModule } from '@spartacus/core';\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { GeolocationBlockingComponent } from \"./geolocation-blocking.component\";\n\n@NgModule({\n    declarations: [GeolocationBlockingComponent],\n    exports: [GeolocationBlockingComponent],\n    entryComponents: [GeolocationBlockingComponent],\n    imports: [\n        CommonModule,\n        NgbModule,\n        I18nModule,\n        ConfigModule.withConfig({\n          cmsComponents: {\n            GeolocationBlockingComponent: {\n              component: GeolocationBlockingComponent,\n            }\n          }\n        } as CmsConfig),\n    ],\n    providers: [\n      LanguageService,\n      provideConfig({\n        i18n: {\n          backend: {\n            loadPath: 'assets/i18n-assets/{{lng}}/{{ns}}.json',\n          },\n          chunks: translationChunksConfig,\n          fallbackLang: 'en',\n        },\n      }),\n    ],\n})\n\nexport class TestGeolocationBlockingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GeolocationBlockingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GeolocationBlockingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestRegisterGeolocationTopModule",
            "id": "module-TestRegisterGeolocationTopModule-6b9c0ebbcdd02d6e3c6ddd6a9af354ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { CmsConfig, ConfigModule, LanguageService, provideConfig } from \"@spartacus/core\";\nimport { translationChunksConfig } from '@spartacus/assets';\nimport {\n  I18nModule,\n} from '@spartacus/core';\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { RegisterGeolocationTopComponent } from \"projects/xplorecomponents/src/public-api\";\nimport { ReactiveComponentModule } from \"@ngrx/component\";\n\n@NgModule({\n    declarations: [RegisterGeolocationTopComponent],\n    exports: [RegisterGeolocationTopComponent],\n    entryComponents: [RegisterGeolocationTopComponent],\n    imports: [\n        CommonModule,\n        NgbModule,\n        ReactiveComponentModule,\n        I18nModule,\n        ConfigModule.withConfig({\n          cmsComponents: {\n            RegisterGeolocationTopComponent: {\n              component: RegisterGeolocationTopComponent\n            }\n          }\n        } as CmsConfig),\n    ],\n    bootstrap: [RegisterGeolocationTopComponent],\n    providers: [\n      provideConfig({\n        i18n: {\n          backend: {\n            loadPath: 'assets/i18n-assets/{{lng}}/{{ns}}.json',\n          },\n          chunks: translationChunksConfig,\n          fallbackLang: 'en',\n        },\n      }),\n    ],\n})\n\nexport class TestRegisterGeolocationTopModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterGeolocationTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RegisterGeolocationTopComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "RegisterGeolocationTopComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserFeatureModule",
            "id": "module-UserFeatureModule-c33bba7658e328b40563af514b917fe7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/spartacus/features/user/user-feature.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CmsConfig, I18nConfig, provideConfig } from \"@spartacus/core\";\nimport { userAccountTranslationChunksConfig, userAccountTranslations } from \"@spartacus/user/account/assets\";\nimport { UserAccountRootModule, USER_ACCOUNT_FEATURE } from \"@spartacus/user/account/root\";\nimport { userProfileTranslationChunksConfig, userProfileTranslations } from \"@spartacus/user/profile/assets\";\nimport { UserProfileRootModule, USER_PROFILE_FEATURE } from \"@spartacus/user/profile/root\";\n\n@NgModule({\n  declarations: [],\n  imports: [\n    UserAccountRootModule,\n    UserProfileRootModule\n  ],\n  providers: [provideConfig(<CmsConfig>{\n    featureModules: {\n      [USER_ACCOUNT_FEATURE]: {\n        module: () =>\n          import('@spartacus/user/account').then((m) => m.UserAccountModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: userAccountTranslations,\n      chunks: userAccountTranslationChunksConfig,\n    },\n  }),\n  provideConfig(<CmsConfig>{\n    featureModules: {\n      [USER_PROFILE_FEATURE]: {\n        module: () =>\n          import('@spartacus/user/profile').then((m) => m.UserProfileModule),\n      },\n    }\n  }),\n  provideConfig(<I18nConfig>{\n    i18n: {\n      resources: userProfileTranslations,\n      chunks: userProfileTranslationChunksConfig,\n    },\n  })\n  ]\n})\nexport class UserFeatureModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/xplorecomponents/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/geolocation-blocking.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/register-geolocation-top.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/register-geolocation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/register-geolocation-top.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  currentCountry: 'Spain', \n  selectedCountry: 'Ireland', \n  message: 'Visit our local site for more information and offers for your country.',\n  hide: false\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/xplorecomponents/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/geolocation-blocking.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GeolocationBlockingComponent>",
                "defaultValue": "args => ({\n    component: GeolocationBlockingComponent,\n    props: {\n      ...args,\n    },\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/register-geolocation-top.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RegisterGeolocationTopComponent>",
                "defaultValue": "args => ({\n    component: RegisterGeolocationTopComponent,\n    props: {\n      ...args,\n    },\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/register-geolocation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RegisterGeolocationComponent>",
                "defaultValue": "args => ({\n    component: RegisterGeolocationComponent,\n    props: {\n      ...args,\n    },\n  })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/xplorecomponents/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/xplorecomponents/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/xplorecomponents/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/geolocation-blocking.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/geolocation-blocking.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/geolocation-blocking.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GeolocationBlockingComponent>",
                    "defaultValue": "args => ({\n    component: GeolocationBlockingComponent,\n    props: {\n      ...args,\n    },\n  })"
                }
            ],
            "stories/register-geolocation-top.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/register-geolocation-top.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/register-geolocation-top.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  currentCountry: 'Spain', \n  selectedCountry: 'Ireland', \n  message: 'Visit our local site for more information and offers for your country.',\n  hide: false\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/register-geolocation-top.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RegisterGeolocationTopComponent>",
                    "defaultValue": "args => ({\n    component: RegisterGeolocationTopComponent,\n    props: {\n      ...args,\n    },\n  })"
                }
            ],
            "stories/register-geolocation.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/register-geolocation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/register-geolocation.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RegisterGeolocationComponent>",
                    "defaultValue": "args => ({\n    component: RegisterGeolocationComponent,\n    props: {\n      ...args,\n    },\n  })"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GeolocationBlockingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AfterContentInit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/geolocation-blocking/geolocation-blocking.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GeolocationBlockingModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterGeolocationTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AfterContentInit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterGeolocationTopModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterGeolocationTopStore",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation-top/register-geolocation-top.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterGeolocationTopState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterGeolocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AfterContentInit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/lib/components/register-geolocation/register-geolocation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterGeolocationModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/xplorecomponents/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/geolocation-blocking.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/geolocation-blocking.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/register-geolocation-top.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/register-geolocation-top.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/register-geolocation-top.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/register-geolocation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/register-geolocation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}